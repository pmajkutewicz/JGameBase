/*
 * Copyright (C) 2006-2014 F. Gerbig (fgerbig@users.sourceforge.net)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package jgamebase.gui;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.swing.DefaultComboBoxModel;

import jgamebase.db.model.Musician;
import jgamebase.model.Paths;
import jgamebase.tools.ListerTools;

/**
 * The GameBase GUI.
 * 
 * @author F. Gerbig (fgerbig@users.sourceforge.net)
 */
public class MusicianDialog extends javax.swing.JDialog {
  /**
	 * 
	 */
  private static final long serialVersionUID = -2325513272152901821L;

  Musician musician;

  public MusicianDialog(final Musician musician) {
    this.musician = musician;
    initComponents();
    nameTextField.setText(musician.getName());
    groupTextField.setText(musician.getGroup());
    nicknameTextField.setText(musician.getNickname());
    initPhotoComboBox();
    for (int i = 0; i < photoComboBox.getModel().getSize(); i++) {
      if (photoComboBox.getModel().getElementAt(i).equals(musician.getPhotoFilename())) {
        photoComboBox.setSelectedIndex(i);
      }
    }
    setLocationRelativeTo(null);
    setVisible(true);
  }

  public MusicianDialog() {
    musician = new Musician();
    initComponents();
    initPhotoComboBox();
    setLocationRelativeTo(null);
    setVisible(true);
  }

  public Musician get() {
    dispose();
    return musician;
  }

  private void initPhotoComboBox() {
    // get all directories
    final List<File> paths = Paths.getPhotoPath().getWithDefault();

    // get all files in these directories
    final List<String> files = new ArrayList<String>();
    for (final File path : paths) {
      files.addAll(ListerTools.list_Dirs_Files_Paths(path.toString(), false, true, false));
    }

    photoComboBox.setModel(new DefaultComboBoxModel(files.toArray(new String[0])));
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextField groupTextField;
  private javax.swing.JTextField nameTextField;
  private javax.swing.JTextField nicknameTextField;
  private javax.swing.JComboBox photoComboBox;

  // End of variables declaration//GEN-END:variables

  /**
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed"
  // <editor-fold defaultstate="collapsed"
  // desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    final javax.swing.JPanel OkCancelPanel = new javax.swing.JPanel();
    final javax.swing.JPanel jPanel9 = new javax.swing.JPanel();
    final javax.swing.JButton saveButton = new javax.swing.JButton();
    final javax.swing.JButton cancelButton = new javax.swing.JButton();
    final javax.swing.JPanel fieldsPanel = new javax.swing.JPanel();
    final javax.swing.JLabel groupLabel = new javax.swing.JLabel();
    final javax.swing.JLabel nicknameLabel = new javax.swing.JLabel();
    final javax.swing.JLabel nameLabel = new javax.swing.JLabel();
    nameTextField = new javax.swing.JTextField();
    groupTextField = new javax.swing.JTextField();
    nicknameTextField = new javax.swing.JTextField();
    final javax.swing.JLabel photoLabel = new javax.swing.JLabel();
    photoComboBox = new javax.swing.JComboBox();

    setTitle("Musician");
    setMinimumSize(new java.awt.Dimension(320, 200));
    setModal(true);
    setResizable(false);
    addWindowListener(new java.awt.event.WindowAdapter() {
      @Override
      public void windowClosing(final java.awt.event.WindowEvent evt) {
        exitFormWindowClosing(evt);
      }
    });

    OkCancelPanel.setLayout(new java.awt.BorderLayout());

    jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

    saveButton.setMnemonic('S');
    saveButton.setText("Save");
    saveButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        okActionPerformed(evt);
      }
    });
    jPanel9.add(saveButton);

    cancelButton.setMnemonic('C');
    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        cancelActionPerformed(evt);
      }
    });
    jPanel9.add(cancelButton);

    OkCancelPanel.add(jPanel9, java.awt.BorderLayout.SOUTH);

    getContentPane().add(OkCancelPanel, java.awt.BorderLayout.SOUTH);

    fieldsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
    fieldsPanel.setLayout(new java.awt.GridBagLayout());

    groupLabel.setDisplayedMnemonic('G');
    groupLabel.setLabelFor(groupTextField);
    groupLabel.setText("Group:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
    fieldsPanel.add(groupLabel, gridBagConstraints);

    nicknameLabel.setDisplayedMnemonic('i');
    nicknameLabel.setLabelFor(nicknameTextField);
    nicknameLabel.setText("Nick:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
    fieldsPanel.add(nicknameLabel, gridBagConstraints);

    nameLabel.setDisplayedMnemonic('N');
    nameLabel.setLabelFor(nameTextField);
    nameLabel.setText("Name:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    fieldsPanel.add(nameLabel, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
    fieldsPanel.add(nameTextField, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.5;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 3);
    fieldsPanel.add(groupTextField, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.5;
    gridBagConstraints.insets = new java.awt.Insets(0, 3, 5, 0);
    fieldsPanel.add(nicknameTextField, gridBagConstraints);

    photoLabel.setDisplayedMnemonic('P');
    photoLabel.setText("Photo:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    fieldsPanel.add(photoLabel, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    fieldsPanel.add(photoComboBox, gridBagConstraints);

    getContentPane().add(fieldsPanel, java.awt.BorderLayout.NORTH);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void cancelActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelActionPerformed
    musician = null;
    setVisible(false);
  }// GEN-LAST:event_cancelActionPerformed

  private void okActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okActionPerformed
    musician.setName(nameTextField.getText());
    musician.setGroup(groupTextField.getText());
    musician.setNickname(nicknameTextField.getText());

    final String photoFilename = (String) photoComboBox.getSelectedItem();
    if ((photoFilename != null) && (!photoFilename.isEmpty())) {
      musician.setPhotoFilename(photoFilename);
    }
    setVisible(false);
  }// GEN-LAST:event_okActionPerformed

  private void exitFormWindowClosing(final java.awt.event.WindowEvent evt) {// GEN-FIRST:event_exitFormWindowClosing
    musician = null;
    setVisible(false);
  }// GEN-LAST:event_exitFormWindowClosing
}