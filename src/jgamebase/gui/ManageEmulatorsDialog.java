/*
 * Copyright (C) 2006-2014 F. Gerbig (fgerbig@users.sourceforge.net)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package jgamebase.gui;

import java.io.File;
import java.util.List;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import jgamebase.Const;
import jgamebase.Const.CloseAction;
import jgamebase.JGameBase;
import jgamebase.model.Databases;
import jgamebase.model.Emulator;
import jgamebase.model.FileExtensions;

/**
 * The GameBase GUI.
 * 
 * @author F. Gerbig (fgerbig@users.sourceforge.net)
 */
public class ManageEmulatorsDialog extends javax.swing.JDialog {

  /**
	 *
	 */
  private static final long serialVersionUID = 2753645443925245053L;

  private CloseAction closeAction = CloseAction.CANCEL;

  private final String type;

  public ManageEmulatorsDialog(final List<Emulator> emulators, final String type) {
    initComponents();
    emulatorsList.setModel(new ListListModel(emulators));
    this.type = type;
    setTitle("Manage " + type + " Emulators");
    this.setSize(400, 200);
    setLocationRelativeTo(null);
    setVisible(true);
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel editEmulatorPanel;
  private javax.swing.JTextField emulatorCommand;
  private javax.swing.JTextField emulatorConfigurationFile;
  private javax.swing.JTextField emulatorName;
  private javax.swing.JTextField emulatorSupportedExtensions;
  protected javax.swing.JList emulatorsList;

  // End of variables declaration//GEN-END:variables

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code
  // <editor-fold defaultstate="collapsed" desc=" Generated Code
  // <editor-fold defaultstate="collapsed"
  // <editor-fold defaultstate="collapsed"
  // desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    editEmulatorPanel = new javax.swing.JPanel();
    final javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
    emulatorName = new javax.swing.JTextField();
    final javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
    emulatorSupportedExtensions = new javax.swing.JTextField();
    final javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
    emulatorCommand = new javax.swing.JTextField();
    final javax.swing.JButton emulatorCommandPathButton = new javax.swing.JButton();
    final javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
    emulatorConfigurationFile = new javax.swing.JTextField();
    final javax.swing.JButton emulatorConfigurationFilePathButton = new javax.swing.JButton();
    final javax.swing.JPanel emulatorsPanel = new javax.swing.JPanel();
    final javax.swing.JPanel buttonPanel = new javax.swing.JPanel();
    final javax.swing.JButton addButton = new javax.swing.JButton();
    final javax.swing.JButton removeButton = new javax.swing.JButton();
    final javax.swing.JButton upButton = new javax.swing.JButton();
    final javax.swing.JButton downButton = new javax.swing.JButton();
    final javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
    emulatorsList = new javax.swing.JList();
    final javax.swing.JPanel OkCancelPanel = new javax.swing.JPanel();
    final javax.swing.JPanel jPanel9 = new javax.swing.JPanel();
    final javax.swing.JButton okButton = new javax.swing.JButton();
    final javax.swing.JButton cancelButton = new javax.swing.JButton();

    editEmulatorPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
    editEmulatorPanel.setMinimumSize(new java.awt.Dimension(400, 120));
    editEmulatorPanel.setPreferredSize(new java.awt.Dimension(400, 120));
    editEmulatorPanel.setLayout(new java.awt.GridBagLayout());

    jLabel1.setText("Emulator name:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
    editEmulatorPanel.add(jLabel1, gridBagConstraints);

    emulatorName.setToolTipText("The name of the emulator.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 2, 0);
    editEmulatorPanel.add(emulatorName, gridBagConstraints);

    jLabel2.setText("Supported extensions:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
    editEmulatorPanel.add(jLabel2, gridBagConstraints);

    emulatorSupportedExtensions
        .setToolTipText("Enter the supported extensions as list separated by semicolons (e.g. \"d64;t64;prg\").");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 2, 0);
    editEmulatorPanel.add(emulatorSupportedExtensions, gridBagConstraints);

    jLabel3.setText("Command to execute:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
    editEmulatorPanel.add(jLabel3, gridBagConstraints);

    emulatorCommand.setToolTipText("The command to execute.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 2, 0);
    editEmulatorPanel.add(emulatorCommand, gridBagConstraints);

    emulatorCommandPathButton.setText("...");
    emulatorCommandPathButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        try {
          final JFileChooser fileChooser = new JFileChooser();
          fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

          if (new File(emulatorCommand.getText()).isAbsolute()) {
            fileChooser.setCurrentDirectory(new File(emulatorCommand.getText()));
          } else {
            fileChooser.setCurrentDirectory(new File(Databases.getCurrent().getPath(),
                Const.SCRIPT_DIRNAME));
          }

          if (fileChooser.showOpenDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION) {
            if (new File(new File(Databases.getCurrent().getPath(), Const.SCRIPT_DIRNAME),
                fileChooser.getSelectedFile().getName()).exists()) {
              emulatorCommand.setText(fileChooser.getSelectedFile().getName());
            } else {
              emulatorCommand.setText(fileChooser.getSelectedFile().getPath());
            }
          }
        } catch (final Exception e) {
          e.printStackTrace();
        }
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    editEmulatorPanel.add(emulatorCommandPathButton, gridBagConstraints);

    jLabel4.setText("Configuration file:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
    editEmulatorPanel.add(jLabel4, gridBagConstraints);

    emulatorConfigurationFile
        .setToolTipText("The configuration file of this emulator. This is usefull, if the emulator is to be started as a script.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 3, 0);
    editEmulatorPanel.add(emulatorConfigurationFile, gridBagConstraints);

    emulatorConfigurationFilePathButton.setText("...");
    emulatorConfigurationFilePathButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        try {
          final JFileChooser fileChooser = new JFileChooser();
          fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

          if (new File(emulatorConfigurationFile.getText()).isAbsolute()) {
            fileChooser.setCurrentDirectory(new File(emulatorConfigurationFile.getText()));
          } else {
            if (new File(emulatorCommand.getText()).isAbsolute()) {
              fileChooser.setCurrentDirectory(new File(emulatorCommand.getText()));
            } else {
              fileChooser.setCurrentDirectory(new File(Databases.getCurrent().getPath(),
                  Const.SCRIPT_DIRNAME));
            }
          }

          if (fileChooser.showOpenDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION) {
            if (new File(new File(Databases.getCurrent().getPath(), Const.SCRIPT_DIRNAME),
                fileChooser.getSelectedFile().getName()).exists()) {
              emulatorConfigurationFile.setText(fileChooser.getSelectedFile().getName());
            } else {
              emulatorConfigurationFile.setText(fileChooser.getSelectedFile().getPath());
            }
          }
        } catch (final Exception e) {
          e.printStackTrace();
        }
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
    editEmulatorPanel.add(emulatorConfigurationFilePathButton, gridBagConstraints);

    setModal(true);
    addWindowListener(new java.awt.event.WindowAdapter() {
      @Override
      public void windowClosing(final java.awt.event.WindowEvent evt) {
        exitFormWindowClosing(evt);
      }
    });

    emulatorsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
    emulatorsPanel.setLayout(new java.awt.BorderLayout());

    buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

    addButton.setIcon(Const.ICON_PATHSELECTOR_ADD);
    addButton.setToolTipText("Add a new Emulator");
    addButton.setBorder(null);
    addButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        addActionPerformed(evt);
      }
    });
    buttonPanel.add(addButton);

    removeButton.setIcon(Const.ICON_PATHSELECTOR_REMOVE);
    removeButton.setToolTipText("Remove the selected Emulator");
    removeButton.setBorder(null);
    removeButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        removeActionPerformed(evt);
      }
    });
    buttonPanel.add(removeButton);

    upButton.setIcon(Const.ICON_PATHSELECTOR_UP);
    upButton.setToolTipText("Move the selected Emulator up");
    upButton.setBorder(null);
    upButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        upActionPerformed(evt);
      }
    });
    buttonPanel.add(upButton);

    downButton.setIcon(Const.ICON_PATHSELECTOR_DOWN);
    downButton.setToolTipText("Move the selected Emulator down");
    downButton.setBorder(null);
    downButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        downActionPerformed(evt);
      }
    });
    buttonPanel.add(downButton);

    emulatorsPanel.add(buttonPanel, java.awt.BorderLayout.NORTH);

    emulatorsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    if (emulatorsList.getModel().getSize() > 0) {
      emulatorsList.setSelectedIndex(0);
    }
    emulatorsList.addMouseListener(new java.awt.event.MouseAdapter() {
      @Override
      public void mouseClicked(final java.awt.event.MouseEvent evt) {
        emulatorsListMouseClicked(evt);
      }
    });
    jScrollPane1.setViewportView(emulatorsList);

    emulatorsPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

    getContentPane().add(emulatorsPanel, java.awt.BorderLayout.CENTER);

    OkCancelPanel.setLayout(new java.awt.BorderLayout());

    jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

    okButton.setMnemonic('O');
    okButton.setText("OK");
    okButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        okActionPerformed(evt);
      }
    });
    jPanel9.add(okButton);

    cancelButton.setMnemonic('C');
    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        cancelActionPerformed(evt);
      }
    });
    jPanel9.add(cancelButton);

    OkCancelPanel.add(jPanel9, java.awt.BorderLayout.SOUTH);

    getContentPane().add(OkCancelPanel, java.awt.BorderLayout.SOUTH);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void cancelActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelActionPerformed
    closeAction = CloseAction.CANCEL;
    dispose();
  }// GEN-LAST:event_cancelActionPerformed

  private void okActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okActionPerformed
    closeAction = CloseAction.OK;
    dispose();
  }// GEN-LAST:event_okActionPerformed

  private void downActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_downActionPerformed
    ListListMethods.moveSelectedDown(emulatorsList);
  }// GEN-LAST:event_downActionPerformed

  private void upActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_upActionPerformed
    ListListMethods.moveSelectedUp(emulatorsList);
  }// GEN-LAST:event_upActionPerformed

  private void removeActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removeActionPerformed
    ListListMethods.removeSelected(emulatorsList);
  }// GEN-LAST:event_removeActionPerformed

  private void emulatorsListMouseClicked(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_emulatorsListMouseClicked
    if (Gui.doubleClick(evt)) {
      edit();
    }
  }// GEN-LAST:event_emulatorsListMouseClicked

  private void edit() {
    final int row = emulatorsList.getSelectedIndex();

    if ((row >= 0) && (row < emulatorsList.getModel().getSize())) {
      final Emulator emulator = ((Emulator) emulatorsList.getSelectedValue());
      emulatorName.setText(emulator.getName());
      emulatorSupportedExtensions.setText(emulator.getSupportedExtensions().toString());
      emulatorCommand.setText(emulator.getCommand());
      emulatorConfigurationFile.setText(emulator.getConfigurationFilename());

      if (JOptionPane.showOptionDialog(JGameBase.getGui(), editEmulatorPanel, "Edit " + type
          + " Emulator", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null,
          null) == JOptionPane.OK_OPTION) {

        String title = emulatorName.getText();
        if (title.isEmpty()) {
          title = "New Emulator";
        }
        emulator.setName(title);
        final FileExtensions extensions = new FileExtensions(emulatorSupportedExtensions.getText());
        if (extensions.isEmpty()) {
          extensions.setMatchesAll();
        }
        emulator.setSupportedExtensions(extensions);
        emulator.setCommand(emulatorCommand.getText());
        emulator.setConfigurationFilename(emulatorConfigurationFile.getText());
      }
    }
  }

  private void addActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addActionPerformed
    add();
  }// GEN-LAST:event_addActionPerformed

  private void add() {
    emulatorName.setText("New Emulator");
    emulatorSupportedExtensions.setText("");
    emulatorCommand.setText("");
    emulatorConfigurationFile.setText("");

    if (JOptionPane
        .showOptionDialog(JGameBase.getGui(), editEmulatorPanel, "Add " + type + " Emulator",
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null) == JOptionPane.OK_OPTION) {

      final Emulator emulator = new Emulator();
      String title = emulatorName.getText();
      if (title.isEmpty()) {
        title = "New Emulator";
      }
      emulator.setName(title);
      final FileExtensions extensions = new FileExtensions(emulatorSupportedExtensions.getText());
      if (extensions.isEmpty()) {
        extensions.setMatchesAll();
      }
      emulator.setSupportedExtensions(extensions);
      emulator.setCommand(emulatorCommand.getText());
      emulator.setConfigurationFilename(emulatorConfigurationFile.getText());
      ((ListListModel) emulatorsList.getModel()).addElement(emulator);
    }
  }

  private void exitFormWindowClosing(final java.awt.event.WindowEvent evt) {// GEN-FIRST:event_exitFormWindowClosing
    closeAction = CloseAction.CANCEL;
    dispose();
  }// GEN-LAST:event_exitFormWindowClosing

  public CloseAction getCloseAction() {
    return closeAction;
  }

  public List<Emulator> getEmulators() {
    return ((ListListModel) emulatorsList.getModel()).get();
  }
}