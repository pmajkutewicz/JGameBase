/*
 * Copyright (C) 2006-2014 F. Gerbig (fgerbig@users.sourceforge.net)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package jgamebase.gui;

import java.util.ArrayList;
import java.util.List;

import javax.swing.table.TableColumn;

import jgamebase.Const.CloseAction;

/**
 * The GameBase GUI.
 * 
 * @author F. Gerbig (fgerbig@users.sourceforge.net)
 */
public class ColumnsDialog extends javax.swing.JDialog {

  /**
	 * 
	 */
  private static final long serialVersionUID = 3242124579733208443L;

  private CloseAction closeAction = CloseAction.CANCEL;

  public ColumnsDialog(final List<TableColumn> visibleTableColumns) {
    initComponents();

    final List<String> visibleColumnNames = getVisibleColumnNames(visibleTableColumns);
    visibleColumnsList.setModel(new ListListModel(visibleColumnNames));
    hiddenColumnsList.setModel(new ListListModel(getHiddenColumnNames(visibleColumnNames)));
    ListListMethods.sort(hiddenColumnsList);

    setSize(320, 480);
    setLocationRelativeTo(null);
    setVisible(true);
  }

  public List<String> getVisibleColumnNames(final List<TableColumn> visibleTableColumns) {
    final List<String> visibleColumnNames = new ArrayList<String>();

    // get visible columns
    for (final TableColumn column : visibleTableColumns) {
      visibleColumnNames.add((String) column.getHeaderValue());
    }

    return visibleColumnNames;
  }

  private List<String> getHiddenColumnNames(final List<String> visibleColumnNames) {
    // get all column names
    final List<String> hiddenColumnNames = ColumnHeader.getNames();
    // remove the visible column names
    hiddenColumnNames.removeAll(visibleColumnNames);
    // return the names of the hidden columns
    return hiddenColumnNames;
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JList hiddenColumnsList;
  private javax.swing.JList visibleColumnsList;

  // End of variables declaration//GEN-END:variables

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code
  // <editor-fold defaultstate="collapsed" desc=" Generated Code
  // <editor-fold defaultstate="collapsed"
  // <editor-fold defaultstate="collapsed"
  // desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    final javax.swing.JPanel mainPanel = new javax.swing.JPanel();
    final javax.swing.JLabel visibleColumnsLabel = new javax.swing.JLabel();
    final javax.swing.JScrollPane visibleColumnsScrollPane = new javax.swing.JScrollPane();
    visibleColumnsList = new javax.swing.JList();
    final javax.swing.JButton selectedVisibleColumnDownButton = new javax.swing.JButton();
    final javax.swing.JButton selectedVisibleColumnUpButton = new javax.swing.JButton();
    final javax.swing.JButton showSelectedColumnButton = new javax.swing.JButton();
    final javax.swing.JButton showAllColumnsButton = new javax.swing.JButton();
    final javax.swing.JButton hideAllColumnsButton = new javax.swing.JButton();
    final javax.swing.JButton hideSelectedColumnButton = new javax.swing.JButton();
    final javax.swing.JLabel hiddenColumnsLabel = new javax.swing.JLabel();
    final javax.swing.JScrollPane hiddenColumnsScrollPane = new javax.swing.JScrollPane();
    hiddenColumnsList = new javax.swing.JList();
    final javax.swing.JPanel OkCancelPanel = new javax.swing.JPanel();
    final javax.swing.JPanel jPanel9 = new javax.swing.JPanel();
    final javax.swing.JButton okButton = new javax.swing.JButton();
    final javax.swing.JButton cancelButton = new javax.swing.JButton();

    setTitle("Configure Table Columns");
    setModal(true);
    addWindowListener(new java.awt.event.WindowAdapter() {
      @Override
      public void windowClosing(final java.awt.event.WindowEvent evt) {
        exitFormWindowClosing(evt);
      }
    });

    mainPanel.setLayout(new java.awt.GridBagLayout());

    visibleColumnsLabel.setText("Visible Columns");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
    mainPanel.add(visibleColumnsLabel, gridBagConstraints);

    visibleColumnsScrollPane
        .setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

    visibleColumnsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    visibleColumnsList.setPreferredSize(new java.awt.Dimension(140, 425));
    visibleColumnsScrollPane.setViewportView(visibleColumnsList);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.gridheight = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
    mainPanel.add(visibleColumnsScrollPane, gridBagConstraints);

    selectedVisibleColumnDownButton.setText("▼");
    selectedVisibleColumnDownButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
    selectedVisibleColumnDownButton.setMaximumSize(new java.awt.Dimension(32, 32));
    selectedVisibleColumnDownButton.setMinimumSize(new java.awt.Dimension(32, 32));
    selectedVisibleColumnDownButton.setPreferredSize(new java.awt.Dimension(32, 32));
    selectedVisibleColumnDownButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        selectedVisibleColumnDown_ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
    gridBagConstraints.weightx = 0.5;
    gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 10);
    mainPanel.add(selectedVisibleColumnDownButton, gridBagConstraints);

    selectedVisibleColumnUpButton.setText("▲");
    selectedVisibleColumnUpButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
    selectedVisibleColumnUpButton.setMaximumSize(new java.awt.Dimension(32, 32));
    selectedVisibleColumnUpButton.setMinimumSize(new java.awt.Dimension(32, 32));
    selectedVisibleColumnUpButton.setPreferredSize(new java.awt.Dimension(32, 32));
    selectedVisibleColumnUpButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        selectedVisibleColumnUp_ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 0.5;
    gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 0);
    mainPanel.add(selectedVisibleColumnUpButton, gridBagConstraints);

    showSelectedColumnButton.setText("◀");
    showSelectedColumnButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
    showSelectedColumnButton.setMaximumSize(new java.awt.Dimension(36, 36));
    showSelectedColumnButton.setMinimumSize(new java.awt.Dimension(36, 36));
    showSelectedColumnButton.setPreferredSize(new java.awt.Dimension(36, 36));
    showSelectedColumnButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        showSelectedColumn_ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
    gridBagConstraints.weighty = 0.25;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
    mainPanel.add(showSelectedColumnButton, gridBagConstraints);

    showAllColumnsButton.setText("◀◀");
    showAllColumnsButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
    showAllColumnsButton.setMaximumSize(new java.awt.Dimension(36, 36));
    showAllColumnsButton.setMinimumSize(new java.awt.Dimension(36, 36));
    showAllColumnsButton.setPreferredSize(new java.awt.Dimension(36, 36));
    showAllColumnsButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        showAllColumns_ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.weighty = 0.25;
    gridBagConstraints.insets = new java.awt.Insets(10, 5, 25, 5);
    mainPanel.add(showAllColumnsButton, gridBagConstraints);

    hideAllColumnsButton.setText("▶▶");
    hideAllColumnsButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
    hideAllColumnsButton.setMaximumSize(new java.awt.Dimension(36, 36));
    hideAllColumnsButton.setMinimumSize(new java.awt.Dimension(36, 36));
    hideAllColumnsButton.setPreferredSize(new java.awt.Dimension(36, 36));
    hideAllColumnsButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        hideAllColumns_ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.weighty = 0.25;
    gridBagConstraints.insets = new java.awt.Insets(25, 5, 10, 5);
    mainPanel.add(hideAllColumnsButton, gridBagConstraints);

    hideSelectedColumnButton.setText("▶");
    hideSelectedColumnButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
    hideSelectedColumnButton.setMaximumSize(new java.awt.Dimension(36, 36));
    hideSelectedColumnButton.setMinimumSize(new java.awt.Dimension(36, 36));
    hideSelectedColumnButton.setPreferredSize(new java.awt.Dimension(36, 36));
    hideSelectedColumnButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        hideSelectedColumn_ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    gridBagConstraints.weighty = 0.25;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
    mainPanel.add(hideSelectedColumnButton, gridBagConstraints);

    hiddenColumnsLabel.setText("Hidden Columns");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
    mainPanel.add(hiddenColumnsLabel, gridBagConstraints);

    hiddenColumnsScrollPane
        .setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

    hiddenColumnsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    hiddenColumnsList.setPreferredSize(new java.awt.Dimension(140, 425));
    hiddenColumnsScrollPane.setViewportView(hiddenColumnsList);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridheight = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    mainPanel.add(hiddenColumnsScrollPane, gridBagConstraints);

    getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

    OkCancelPanel.setLayout(new java.awt.BorderLayout());

    jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

    okButton.setMnemonic('O');
    okButton.setText("OK");
    okButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        okActionPerformed(evt);
      }
    });
    jPanel9.add(okButton);

    cancelButton.setMnemonic('C');
    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        cancelActionPerformed(evt);
      }
    });
    jPanel9.add(cancelButton);

    OkCancelPanel.add(jPanel9, java.awt.BorderLayout.SOUTH);

    getContentPane().add(OkCancelPanel, java.awt.BorderLayout.SOUTH);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void hideSelectedColumn_ActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_hideSelectedColumn_ActionPerformed
    ListListMethods.moveSelected(visibleColumnsList, hiddenColumnsList);
    ListListMethods.sort(hiddenColumnsList);
  }// GEN-LAST:event_hideSelectedColumn_ActionPerformed

  private void hideAllColumns_ActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_hideAllColumns_ActionPerformed
    ListListMethods.moveAll(visibleColumnsList, hiddenColumnsList);
    ListListMethods.sort(hiddenColumnsList);
  }// GEN-LAST:event_hideAllColumns_ActionPerformed

  private void showAllColumns_ActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_showAllColumns_ActionPerformed
    ListListMethods.moveAll(hiddenColumnsList, visibleColumnsList);
  }// GEN-LAST:event_showAllColumns_ActionPerformed

  private void showSelectedColumn_ActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_showSelectedColumn_ActionPerformed
    ListListMethods.moveSelected(hiddenColumnsList, visibleColumnsList);
  }// GEN-LAST:event_showSelectedColumn_ActionPerformed

  private void selectedVisibleColumnUp_ActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_selectedVisibleColumnUp_ActionPerformed
    ListListMethods.moveSelectedUp(visibleColumnsList);
  }// GEN-LAST:event_selectedVisibleColumnUp_ActionPerformed

  private void selectedVisibleColumnDown_ActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_selectedVisibleColumnDown_ActionPerformed
    ListListMethods.moveSelectedDown(visibleColumnsList);
  }// GEN-LAST:event_selectedVisibleColumnDown_ActionPerformed

  private void cancelActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelActionPerformed
    closeAction = CloseAction.CANCEL;
    setVisible(false);
  }// GEN-LAST:event_cancelActionPerformed

  private void okActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okActionPerformed
    closeAction = CloseAction.OK;
    setVisible(false);
  }// GEN-LAST:event_okActionPerformed

  private void exitFormWindowClosing(final java.awt.event.WindowEvent evt) {// GEN-FIRST:event_exitFormWindowClosing
    closeAction = CloseAction.CANCEL;
    setVisible(false);
  }// GEN-LAST:event_exitFormWindowClosing

  public CloseAction getCloseAction() {
    return closeAction;
  }

  public List<String> getVisibleColumns() {
    return ListListModel.get(visibleColumnsList);

  }
}