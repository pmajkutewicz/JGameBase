/*
 * Copyright (C) 2006-2014 F. Gerbig (fgerbig@users.sourceforge.net)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package jgamebase.gui;

import java.util.ArrayList;
import java.util.List;

import javax.swing.DefaultComboBoxModel;

import jgamebase.Const;
import jgamebase.db.Db;
import jgamebase.db.model.Game;
import jgamebase.db.model.Item;
import jgamebase.db.model.ItemViewFilter;
import jgamebase.db.model.Selection;

/**
 * The GameBase GUI.
 * 
 * @author F. Gerbig (fgerbig@users.sourceforge.net)
 */
public class PersonalInfoDialog extends javax.swing.JDialog {
  /**
	 * 
	 */
  private static final long serialVersionUID = 2138642841415232777L;

  List<Item> list;

  Game game;

  boolean isList;

  public PersonalInfoDialog(final Game game) {
    isList = false;
    this.game = game;

    initComponents();
    this.setSize(400, 480);

    selectIncludes(true); // select all fields
    propertiesPane.remove(0); // hide includePane

    highScoreTextField.setText(game.getHighscore());
    difficultyComboBox.setModel(new DefaultComboBoxModel(new ItemViewFilter("Difficulty",
        ItemViewFilter.SELECTOR_DB, ItemViewFilter.CLAUSETYPE_DBFIELD,
        ItemViewFilter.OPERATOR_EQUAL, "Difficulty", "DI_Id", "", "").getSelections().toArray()));
    for (int i = 0; i < difficultyComboBox.getModel().getSize(); i++) {
      if (((Selection) difficultyComboBox.getModel().getElementAt(i)).getValue().equals(
          String.valueOf(game.getDifficulty().getId()))) {
        difficultyComboBox.setSelectedIndex(i);
      }
    }

    ratingComboBox.setModel(new DefaultComboBoxModel(Const.FORDISPLAY_RATING));
    ratingComboBox.setSelectedIndex(game.getRating());
    ratingIconLabel.setIcon(Const.LARGEICONS_GAMEINFO_RATING[ratingComboBox.getSelectedIndex()]);

    adultGameCheckbox.setSelected(game.getIsAdult());
    favouriteGameCheckbox.setSelected(game.getIsFavourite());

    notesTextArea.setText(game.getNote());
    setLocationRelativeTo(null);
    setVisible(true);
  }

  public PersonalInfoDialog(final List<Item> list) {
    isList = true;
    this.list = list;
    initComponents();
    this.setSize(400, 480);

    selectIncludes(false); // select none fields

    difficultyComboBox.setModel(new DefaultComboBoxModel(new ItemViewFilter("Difficulty",
        ItemViewFilter.SELECTOR_DB, ItemViewFilter.CLAUSETYPE_DBFIELD,
        ItemViewFilter.OPERATOR_EQUAL, "Difficulty", "DI_Id", "", "").getSelections().toArray()));
    difficultyComboBox.setSelectedIndex(7);

    ratingComboBox.setModel(new DefaultComboBoxModel(Const.FORDISPLAY_RATING));
    ratingIconLabel.setIcon(Const.LARGEICONS_GAMEINFO_RATING[ratingComboBox.getSelectedIndex()]);

    setVisible(true);
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox adultGameCheckbox;
  private javax.swing.JCheckBox dateLastPlayedCheckbox;
  private javax.swing.JComboBox difficultyComboBox;
  private javax.swing.JCheckBox favouriteGameCheckbox;
  private javax.swing.JTextField highScoreTextField;
  private javax.swing.JCheckBox includeAdultGameCheckbox;
  private javax.swing.JCheckBox includeDateLastPlayedCheckbox;
  private javax.swing.JCheckBox includeDifficultyCheckbox;
  private javax.swing.JCheckBox includeFavouriteGameCheckbox;
  private javax.swing.JCheckBox includeHighScoreCheckbox;
  private javax.swing.JCheckBox includeNotesCheckbox;
  private javax.swing.JCheckBox includeRatingCheckbox;
  private javax.swing.JCheckBox includeTimesPlayedCheckbox;
  private javax.swing.JTextArea notesTextArea;
  private javax.swing.JTabbedPane propertiesPane;
  private javax.swing.JComboBox ratingComboBox;
  private javax.swing.JLabel ratingIconLabel;
  private javax.swing.JCheckBox timesPlayedCheckbox;

  // End of variables declaration//GEN-END:variables

  /**
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed"
  // <editor-fold defaultstate="collapsed"
  // desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    propertiesPane = new javax.swing.JTabbedPane();
    final javax.swing.JPanel includePanel = new javax.swing.JPanel();
    final javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
    includeHighScoreCheckbox = new javax.swing.JCheckBox();
    includeAdultGameCheckbox = new javax.swing.JCheckBox();
    includeDifficultyCheckbox = new javax.swing.JCheckBox();
    includeFavouriteGameCheckbox = new javax.swing.JCheckBox();
    includeRatingCheckbox = new javax.swing.JCheckBox();
    includeNotesCheckbox = new javax.swing.JCheckBox();
    includeTimesPlayedCheckbox = new javax.swing.JCheckBox();
    final javax.swing.JPanel jPanel3 = new javax.swing.JPanel();
    includeDateLastPlayedCheckbox = new javax.swing.JCheckBox();
    final javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
    final javax.swing.JButton includeAllButton = new javax.swing.JButton();
    final javax.swing.JButton includeNoneButton = new javax.swing.JButton();
    final javax.swing.JPanel fieldsPanel = new javax.swing.JPanel();
    final javax.swing.JLabel crackerLabel = new javax.swing.JLabel();
    difficultyComboBox = new javax.swing.JComboBox();
    final javax.swing.JLabel noOfTrainersLabel = new javax.swing.JLabel();
    highScoreTextField = new javax.swing.JTextField();
    final javax.swing.JLabel palNtscLabel = new javax.swing.JLabel();
    ratingComboBox = new javax.swing.JComboBox();
    timesPlayedCheckbox = new javax.swing.JCheckBox();
    final javax.swing.JLabel notesLabel = new javax.swing.JLabel();
    dateLastPlayedCheckbox = new javax.swing.JCheckBox();
    adultGameCheckbox = new javax.swing.JCheckBox();
    favouriteGameCheckbox = new javax.swing.JCheckBox();
    ratingIconLabel = new javax.swing.JLabel();
    final javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
    notesTextArea = new javax.swing.JTextArea();
    final javax.swing.JPanel OkCancelPanel = new javax.swing.JPanel();
    final javax.swing.JPanel jPanel9 = new javax.swing.JPanel();
    final javax.swing.JButton okButton = new javax.swing.JButton();
    final javax.swing.JButton cancelButton = new javax.swing.JButton();

    setTitle("Personal Info Properties...");
    setModal(true);
    setResizable(false);
    addWindowListener(new java.awt.event.WindowAdapter() {
      @Override
      public void windowClosing(final java.awt.event.WindowEvent evt) {
        exitFormWindowClosing(evt);
      }
    });

    includePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
    includePanel.setLayout(new java.awt.GridLayout(2, 1));

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Fields to update"));
    jPanel1.setLayout(new java.awt.GridLayout(5, 2));

    includeHighScoreCheckbox.setMnemonic('H');
    includeHighScoreCheckbox.setText("High Score");
    includeHighScoreCheckbox.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        includesChangedActionPerformed(evt);
      }
    });
    jPanel1.add(includeHighScoreCheckbox);

    includeAdultGameCheckbox.setMnemonic('u');
    includeAdultGameCheckbox.setText("Adult Game");
    includeAdultGameCheckbox.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        includesChangedActionPerformed(evt);
      }
    });
    jPanel1.add(includeAdultGameCheckbox);

    includeDifficultyCheckbox.setMnemonic('D');
    includeDifficultyCheckbox.setText("Difficulty");
    includeDifficultyCheckbox.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        includesChangedActionPerformed(evt);
      }
    });
    jPanel1.add(includeDifficultyCheckbox);

    includeFavouriteGameCheckbox.setMnemonic('v');
    includeFavouriteGameCheckbox.setText("Favourite Game");
    includeFavouriteGameCheckbox.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        includesChangedActionPerformed(evt);
      }
    });
    jPanel1.add(includeFavouriteGameCheckbox);

    includeRatingCheckbox.setMnemonic('R');
    includeRatingCheckbox.setText("Rating");
    includeRatingCheckbox.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        includesChangedActionPerformed(evt);
      }
    });
    jPanel1.add(includeRatingCheckbox);

    includeNotesCheckbox.setMnemonic('e');
    includeNotesCheckbox.setText("Notes");
    includeNotesCheckbox.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        includesChangedActionPerformed(evt);
      }
    });
    jPanel1.add(includeNotesCheckbox);

    includeTimesPlayedCheckbox.setMnemonic('T');
    includeTimesPlayedCheckbox.setText("Times Played");
    includeTimesPlayedCheckbox.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        includesChangedActionPerformed(evt);
      }
    });
    jPanel1.add(includeTimesPlayedCheckbox);
    jPanel1.add(jPanel3);

    includeDateLastPlayedCheckbox.setMnemonic('L');
    includeDateLastPlayedCheckbox.setText("Date Last Played");
    includeDateLastPlayedCheckbox.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        includesChangedActionPerformed(evt);
      }
    });
    jPanel1.add(includeDateLastPlayedCheckbox);

    includePanel.add(jPanel1);

    jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

    includeAllButton.setMnemonic('A');
    includeAllButton.setText("Select All");
    includeAllButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        selectAllIncludesActionPerformed(evt);
      }
    });
    jPanel2.add(includeAllButton);

    includeNoneButton.setMnemonic('N');
    includeNoneButton.setText("Select None");
    includeNoneButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        selectNoneIncludesActionPerformed(evt);
      }
    });
    jPanel2.add(includeNoneButton);

    includePanel.add(jPanel2);

    propertiesPane.addTab("Include", includePanel);

    fieldsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
    fieldsPanel.setLayout(new java.awt.GridBagLayout());

    crackerLabel.setDisplayedMnemonic('H');
    crackerLabel.setLabelFor(highScoreTextField);
    crackerLabel.setText("High Score:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    fieldsPanel.add(crackerLabel, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.5;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 5);
    fieldsPanel.add(difficultyComboBox, gridBagConstraints);

    noOfTrainersLabel.setDisplayedMnemonic('D');
    noOfTrainersLabel.setLabelFor(difficultyComboBox);
    noOfTrainersLabel.setText("Difficulty:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    fieldsPanel.add(noOfTrainersLabel, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 0);
    fieldsPanel.add(highScoreTextField, gridBagConstraints);

    palNtscLabel.setDisplayedMnemonic('R');
    palNtscLabel.setLabelFor(ratingComboBox);
    palNtscLabel.setText("Rating:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    fieldsPanel.add(palNtscLabel, gridBagConstraints);

    ratingComboBox.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        ratingChangedActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 0);
    fieldsPanel.add(ratingComboBox, gridBagConstraints);

    timesPlayedCheckbox.setMnemonic('T');
    timesPlayedCheckbox.setText("Reset Times Played");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
    fieldsPanel.add(timesPlayedCheckbox, gridBagConstraints);

    notesLabel.setDisplayedMnemonic('e');
    notesLabel.setLabelFor(notesTextArea);
    notesLabel.setText("Notes:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    fieldsPanel.add(notesLabel, gridBagConstraints);

    dateLastPlayedCheckbox.setMnemonic('L');
    dateLastPlayedCheckbox.setText("Reset Date Last Played");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 0);
    fieldsPanel.add(dateLastPlayedCheckbox, gridBagConstraints);

    adultGameCheckbox.setMnemonic('u');
    adultGameCheckbox.setText("Adult Game");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
    fieldsPanel.add(adultGameCheckbox, gridBagConstraints);

    favouriteGameCheckbox.setMnemonic('v');
    favouriteGameCheckbox.setText("Favourite Game");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 0);
    fieldsPanel.add(favouriteGameCheckbox, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 15, 0);
    fieldsPanel.add(ratingIconLabel, gridBagConstraints);

    jScrollPane1
        .setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

    notesTextArea.setLineWrap(true);
    jScrollPane1.setViewportView(notesTextArea);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 9;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    fieldsPanel.add(jScrollPane1, gridBagConstraints);

    propertiesPane.addTab("Fields", fieldsPanel);

    getContentPane().add(propertiesPane, java.awt.BorderLayout.CENTER);

    OkCancelPanel.setLayout(new java.awt.BorderLayout());

    jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

    okButton.setMnemonic('O');
    okButton.setText("OK");
    okButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        okActionPerformed(evt);
      }
    });
    jPanel9.add(okButton);

    cancelButton.setMnemonic('C');
    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        cancelActionPerformed(evt);
      }
    });
    jPanel9.add(cancelButton);

    OkCancelPanel.add(jPanel9, java.awt.BorderLayout.SOUTH);

    getContentPane().add(OkCancelPanel, java.awt.BorderLayout.SOUTH);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void ratingChangedActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ratingChangedActionPerformed
    ratingIconLabel.setIcon(Const.LARGEICONS_GAMEINFO_RATING[ratingComboBox.getSelectedIndex()]);
  }// GEN-LAST:event_ratingChangedActionPerformed

  private void includesChangedActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_includesChangedActionPerformed
    includesChanged();
  }// GEN-LAST:event_includesChangedActionPerformed

  private void selectNoneIncludesActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_selectNoneIncludesActionPerformed
    selectIncludes(false);
  }// GEN-LAST:event_selectNoneIncludesActionPerformed

  private void cancelActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelActionPerformed
    dispose();
  }// GEN-LAST:event_cancelActionPerformed

  private void selectAllIncludesActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_selectAllIncludesActionPerformed
    selectIncludes(true);
  }// GEN-LAST:event_selectAllIncludesActionPerformed

  private void selectIncludes(final boolean b) {
    includeHighScoreCheckbox.setSelected(b);
    includeDifficultyCheckbox.setSelected(b);
    includeRatingCheckbox.setSelected(b);
    includeTimesPlayedCheckbox.setSelected(b);
    includeDateLastPlayedCheckbox.setSelected(b);
    includeAdultGameCheckbox.setSelected(b);
    includeFavouriteGameCheckbox.setSelected(b);
    includeNotesCheckbox.setSelected(b);
    includesChanged();
  }

  private void includesChanged() {
    highScoreTextField.setEnabled(includeHighScoreCheckbox.isSelected());
    difficultyComboBox.setEnabled(includeDifficultyCheckbox.isSelected());
    ratingComboBox.setEnabled(includeRatingCheckbox.isSelected());
    timesPlayedCheckbox.setEnabled(includeTimesPlayedCheckbox.isSelected());
    dateLastPlayedCheckbox.setEnabled(includeDateLastPlayedCheckbox.isSelected());
    adultGameCheckbox.setEnabled(includeAdultGameCheckbox.isSelected());
    favouriteGameCheckbox.setEnabled(includeFavouriteGameCheckbox.isSelected());
    notesTextArea.setEnabled(includeNotesCheckbox.isSelected());
  }

  private void okActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okActionPerformed
    if (!isList) {
      list = new ArrayList<Item>();
      list.add(game);
    }

    for (final Item item : list) {

      if (item instanceof Game) {
        final Game game = (Game) item;

        if (includeHighScoreCheckbox.isSelected()) {
          game.setHighscore(highScoreTextField.getText().trim());
        }

        if (includeDifficultyCheckbox.isSelected()) {
          game.setDifficulty(Db.getDifficultyById(Integer.parseInt(((Selection) difficultyComboBox
              .getSelectedItem()).getValue())));
        }

        if (includeRatingCheckbox.isSelected()) {
          game.setRating(ratingComboBox.getSelectedIndex());
        }

        if (includeTimesPlayedCheckbox.isSelected()) {
          game.setTimesPlayed(0);
        }

        if (includeDateLastPlayedCheckbox.isSelected()) {
          game.setDateLastPlayed("");
        }

        if (includeAdultGameCheckbox.isSelected()) {
          game.setIsAdult(adultGameCheckbox.isSelected());
        }

        if (includeFavouriteGameCheckbox.isSelected()) {
          game.setIsFavourite(favouriteGameCheckbox.isSelected());
        }

        if (includeNotesCheckbox.isSelected()) {
          game.setNote(notesTextArea.getText().trim());
        }

        Db.saveOrUpdate(game);
      }
    }
    dispose();
  }// GEN-LAST:event_okActionPerformed

  private void exitFormWindowClosing(final java.awt.event.WindowEvent evt) {// GEN-FIRST:event_exitFormWindowClosing
    dispose();
  }// GEN-LAST:event_exitFormWindowClosing
}