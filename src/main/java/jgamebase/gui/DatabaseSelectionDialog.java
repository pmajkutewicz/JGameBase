/*
 * Copyright (C) 2006-2014 F. Gerbig (fgerbig@users.sourceforge.net)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package jgamebase.gui;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import javax.swing.AbstractListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

import jgamebase.Const;
import jgamebase.Const.CloseAction;
import jgamebase.model.Database;
import jgamebase.model.DatabaseSelection;

/**
 * 
 * @author frank
 */
public class DatabaseSelectionDialog extends javax.swing.JDialog {

  private static final long serialVersionUID = 5990932845446774180L;

  static class Renderer extends JLabel implements ListCellRenderer {

    private static final long serialVersionUID = -402260793264251536L;

    public Renderer() {
      setOpaque(true);
      setHorizontalAlignment(LEFT);
      setVerticalAlignment(CENTER);
    }

    @Override
    public Component getListCellRendererComponent(final JList list, final Object value,
        final int index, final boolean isSelected, final boolean cellHasFocus) {
      final DatabaseSelection item = (DatabaseSelection) value;

      if (isSelected) {
        setBackground(list.getSelectionBackground());
        setForeground(list.getSelectionForeground());
      } else {
        setBackground(list.getBackground());
        setForeground(list.getForeground());
      }

      setText(item.getDisplayName());
      if (item.getIcon() != null) {
        setIcon(item.getIcon());
      } else {
        setIcon(Const.ICON_DEFAULT_DATABASE);
      }
      setFont(list.getFont());

      return this;
    }
  }

  private CloseAction closeAction = CloseAction.CANCEL;
  private boolean downloadButtonPressed = false;

  /** Creates new form DatabaseSelectionDialog */
  @SuppressWarnings("serial")
  public DatabaseSelectionDialog(final java.awt.Frame parent,
      final List<? extends DatabaseSelection> items, final boolean isDownload) {
    super(parent);
    initComponents();

    setIconImage(Const.IMAGE_JGAMEBASE);
    setTitle(isDownload ? "Gamebase(s) to download" : "Gamebase to load");

    list.setModel(new AbstractListModel() {
      @Override
      public int getSize() {
        return items.size();
      }

      @Override
      public Object getElementAt(final int i) {
        return items.get(i);
      }
    });

    if (isDownload) {
      list.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    } else {
      list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    }
    list.setSelectedIndex(0);
    list.setCellRenderer(new Renderer());

    downloadPanel.setVisible(isDownload);

    // center dialog
    setLocationRelativeTo(null);

    // show dialog
    setVisible(true);

  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed"
  // <editor-fold defaultstate="collapsed"
  // desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    scrollPane = new javax.swing.JScrollPane();
    list = new javax.swing.JList();
    okButton = new javax.swing.JButton();
    downloadPanel = new javax.swing.JPanel();
    final javax.swing.JButton downloadButton = new javax.swing.JButton();

    setAlwaysOnTop(true);
    setBackground(java.awt.Color.white);
    setModal(true);
    addWindowListener(new java.awt.event.WindowAdapter() {
      @Override
      public void windowClosing(final java.awt.event.WindowEvent evt) {
        formWindowClosing(evt);
      }
    });

    jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jPanel1.setLayout(new java.awt.BorderLayout());

    scrollPane.setPreferredSize(new java.awt.Dimension(259, 131));

    list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    list.setBackground(Color.WHITE);
    list.addMouseListener(new java.awt.event.MouseAdapter() {
      @Override
      public void mouseClicked(final java.awt.event.MouseEvent evt) {
        listMouseClicked(evt);
      }
    });
    list.addKeyListener(new java.awt.event.KeyAdapter() {
      @Override
      public void keyPressed(final java.awt.event.KeyEvent evt) {
        listKeyPressed(evt);
      }
    });
    scrollPane.setViewportView(list);

    jPanel1.add(scrollPane, java.awt.BorderLayout.CENTER);

    okButton.setText("OK");
    okButton.setMaximumSize(new java.awt.Dimension(67, 24));
    okButton.setMinimumSize(new java.awt.Dimension(67, 24));
    okButton.setPreferredSize(new java.awt.Dimension(67, 24));
    okButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        okButtonActionPerformed(evt);
      }
    });
    jPanel1.add(okButton, java.awt.BorderLayout.SOUTH);

    getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

    downloadButton.setText("Download Gamebases");
    downloadButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(final java.awt.event.ActionEvent evt) {
        downloadButtonActionPerformed(evt);
      }
    });
    downloadPanel.add(downloadButton);

    getContentPane().add(downloadPanel, java.awt.BorderLayout.SOUTH);

    final java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    setBounds((screenSize.width - 410) / 2, (screenSize.height - 510) / 2, 410, 510);
  }// </editor-fold>//GEN-END:initComponents

  private void okButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okButtonActionPerformed
    closeAction = CloseAction.OK;
    setVisible(false);
  }// GEN-LAST:event_okButtonActionPerformed

  private void downloadButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_downloadButtonActionPerformed
    closeAction = CloseAction.OK;
    downloadButtonPressed = true;
    setVisible(false);
  }// GEN-LAST:event_downloadButtonActionPerformed

  private void listMouseClicked(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_listMouseClicked
    if (Gui.doubleClick(evt)) {
      closeAction = CloseAction.OK;
      setVisible(false);
    }
  }// GEN-LAST:event_listMouseClicked

  private void formWindowClosing(final java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowClosing
    closeAction = CloseAction.CANCEL;
    setVisible(false);
  }// GEN-LAST:event_formWindowClosing

  private void listKeyPressed(final java.awt.event.KeyEvent evt) {// GEN-FIRST:event_listKeyPressed
    if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
      closeAction = CloseAction.OK;
      setVisible(false);
    }
  }// GEN-LAST:event_listKeyPressed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel downloadPanel;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JList list;
  private javax.swing.JButton okButton;
  javax.swing.JScrollPane scrollPane;

  // End of variables declaration//GEN-END:variables

  public CloseAction getCloseAction() {
    return closeAction;
  }

  public boolean getDownloadButtonPressed() {
    return downloadButtonPressed;
  }

  public List<DatabaseSelection> getSelected() {
    final List<DatabaseSelection> selected = new ArrayList<DatabaseSelection>();
    selected.addAll((Collection<? extends DatabaseSelection>) Arrays.asList(list
        .getSelectedValues()));
    return selected;
  }

}
